
from transformers import AutoModelForCausalLM, AutoTokenizer, AutoTokenizer, GenerationConfig
import torch
import streamlit as st
model_id = "mrm8488/falcoder-7b"

@st.cache_resource
def get_model(model_id):
    tokenizer = AutoTokenizer.from_pretrained(model_id)
    model = AutoModelForCausalLM.from_pretrained(model_id, trust_remote_code=True,  device_map="auto", offload_folder="./" ,torch_dtype=torch.bfloat16,).to("cuda")
    return tokenizer, model

tokenizer, model = get_model(model_id)

temperature=0.1,
top_p=0.75,
top_k=40,
num_beams=4
generation_config = GenerationConfig(
        temperature=temperature,
        top_p=top_p,
        top_k=top_k,
        num_beams=num_beams,
    
    )

def generate(
        instruction,
        max_new_tokens=1024,
        **kwargs
):
    prompt = instruction + "\n### Solution:\n"
    print(prompt)
    inputs = tokenizer(prompt, return_tensors="pt")
    input_ids = inputs["input_ids"].to("cuda")
    attention_mask = inputs["attention_mask"].to("cuda")
    with torch.no_grad():
        generation_output = model.generate(
            input_ids=input_ids,
            attention_mask=attention_mask,
            generation_config=generation_config,
            return_dict_in_generate=True,
            output_scores=True,
            max_new_tokens=max_new_tokens,
            early_stopping=True
        )
    s = generation_output.sequences[0]
    output = tokenizer.decode(s)
    return output.split("### Solution:")[1].lstrip("\n")



question = st.text_input(
    "question",
    value="Design a class for representing a person in Java.",
    max_chars=None,
    key="llm",
    type="default",
    help=None,
    autocomplete=None,
    on_change=None,
    args=None,
    kwargs=None,
    placeholder=None,
    disabled=False,
    label_visibility="visible",
)
if question:
    instruction = question#"write java code to upload a txt file to aws s3" 
    st.write(generate(instruction))



